---
blueprint:
  name: ICA - Track new offers
  description: "**Version 0.3**\n
    This automation will be triggered when new ICA offers have been detected, so that you can get a notification or automatically add to your ICA shopping list.\n
    The tracked offers can be filtered by Store, OfferName or ArticleName\n. This automation also looks through your account's favorite items and matches names/ean(s)\n
    \n
    [See the source on GitHub:](https://github.com/LazyTarget/ha-ica-todo/blob/main/custom_components/ica/blueprints/ica_track_new_offers.yaml)\n"
  domain: automation
  source_url: https://github.com/LazyTarget/ha-ica-todo/blob/main/custom_components/ica/blueprints/ica_track_new_offers.yaml
  author: LazyTarget
  input:
    ica_integration:
      name: ICA Account
      description: The ICA account to get favorite items from
      # default: ''
      # todo: make optional, to disable Baseitems matching
      selector:
        config_entry:
          integration: ica

    filter_stores:
      name: Filter by ICA Store(s)
      description: >
        Enter `store_id` to filter on particular ICA store. Otherwise leave empty to omit filter.


        Example value: `[12805]`
      default: []
      selector:
        text:
          multiple: true

    include_names:
      name: Names to match against
      description: >
        Enter `offer_name` or `article_name` to include offers on. Otherwise leave empty to omit explicit includes.


        Example value: `[Majs Green Giant, Palsternacka 500g Klass 1 ICA]`
      default: []
      selector:
        text:
          multiple: true

    actions:
      name: Actions to execute
      description: >
        Actions to execute when the automation triggers with new matching offers.


        The following variables are available to use:

        - `matched_offers` - Contains a list of the offers that were found.


        - `matched_offer_ids` - Contains a list of the ids of the offers that were found.


        To add the tracked offers to your shopping list, simply call the service `ica.add_offers_to_shopping_list` and specify the target To-do list entity and pass the variable `matched_offer_ids`.

        The field `conflict_mode` can be set to determine the handling of when an item/offer already exists in the shopping list.
      default:
        - action: notify.persistent_notification
          metadata: {}
          data:
            message: >
              Adding the following offers to your ICA shopping list:<br><br>
              - {{ matched_offers | map(attribute='name') | join("<br> - ") }}<br>
          enabled: true
        - action: ica.add_offers_to_shopping_list
          metadata: {}
          data:
            offer_ids: "{{ matched_offer_ids }}"
            conflict_mode: APPEND
            entity_id: <todo.ica_shopping_list>
      selector:
        action: {}

triggers:
  trigger: event
  event_type: ica_new_offers

mode: queued
max: 5

variables:
  filter_stores: !input filter_stores
  include_names: !input include_names

conditions:
  condition: template
  value_template: >
    {{ trigger.event.data.type == "new_offers" 
    or trigger.event.data.type == "new_offers_WIP" }}

actions:
  - variables:
      offers: "{{ trigger.event.data.new_offers | list }}"
      offer_length: "{{offers | count | int(0)}}"
      matches: []
    alias: Arrange Offers

  - variables:
      offers: |
        {%- if filter_stores -%}
          {%- set result = namespace(items=[]) -%}
          {%- for o in offers | rejectattr("stores", "undefined") -%}
              {%- set matched_stores = o["stores"] 
                  | selectattr("id", "in", filter_stores | map('int') | list) | list -%}
              {%- if matched_stores | count > 0 -%}
                {%- set result.items = result.items + [o] -%}
              {%- endif -%}
          {%- endfor -%}
          {{result.items}}
        {%- else -%}
          {{offers}}
        {%- endif -%}
      offer_length: "{{offers | count | int(0)}}"
    alias: Limit Offers to the chosen stores

  - alias: If has offers left, then proceed to fetch favorites
    if:
      - alias: If has modified offers
        condition: template
        value_template: "{{ (offers | default([]) | count) > 0 }}"
    then:
      # - variables:
      #     ica_integration: !input ica_integration
      # - alias: If ICA integration was passed, then fetch Base items and include in filters
      #   if:
      #     - alias: If has ICA integration
      #       condition: template
      #       value_template: "{{ ica_integration | count > 0 }}"
      #   then:
      - action: ica.get_baseitems
        metadata: {}
        data:
          integration: !input ica_integration
        response_variable: ica_baseitems

      - variables:
          baseitems_eans: >
            {{ ica_baseitems["data"] 
                | default([]) 
                | rejectattr("articleEan", "undefined") 
                | map(attribute="articleEan") | list }}
        alias: Arrange 'Favorite items'

      - variables:
          baseitems_eans: |
            {% set p = namespace(id=baseitems_eans or []) %}
            {%- for x in p.id -%}
            {%- if x.startswith('0') -%}
                {%- set p.id = p.id + [x.lstrip('0')] -%}
              {%- endif -%}
            {%- endfor -%}
            {{p.id}}
        alias: Expand 'baseitems_eans' with EANs without '0'-prefix

      - variables:
          matches: >
            {%- set offer_ids = matches | default([]) | map(attribute="id") | list -%}
            {%- set result = namespace(id=offer_ids, offers=matches or []) -%}
            {%- for o in offers
              | rejectattr("eans", "undefined")
              | rejectattr("id", "in", result.id) -%}
                {%- set matched_eans = o["eans"] | selectattr("id", "in", baseitems_eans) | list -%}
                {%- if matched_eans | count > 0 -%}
                  {%- set result.id = result.id + [o.id] -%}
                  {%- set result.offers = result.offers + [o] -%}
                {%- endif -%}
            {%- endfor -%}
            {{result.offers}}
        alias: Append to matches, for Offers by "Favorite article ean(s)"

      - variables:
          include_names: >
            {% set result = namespace(names=include_names or []) %}

            {%- for b in ica_baseitems["data"]
                | default([])
                | selectattr("articleEan", "undefined")
                | rejectattr("text", "in", result.names) -%}
              {%- set result.names = result.names + [b.text] -%}
            {%- endfor -%}

            {{result.names}}
        alias: Expand 'include_names' with Favorite items without an "EAN"

      - variables:
          matches: |
            {%- if include_names -%}
              {%- set offer_ids = matches | default([]) | map(attribute="id") | list -%}
              {%- set result = namespace(id=offer_ids, offers=matches or []) -%}
              {%- for o in offers | rejectattr("id", "in", result.id) -%}
                  {%- set matched_eanArticles = o["eans"] | selectattr("articleDescription", "in", include_names) | list -%}
                  {%- if matched_eanArticles | count > 0 -%}
                    {%- set result.id = result.id + [o.id] -%}
                    {%- set result.offers = result.offers + [o] -%}
                  {%- elif o["name"] in include_names -%}
                    {%- set result.id = result.id + [o.id] -%}
                    {%- set result.offers = result.offers + [o] -%}
                  {%- endif -%}
              {%- endfor -%}
              {{result.offers}}
            {%- else -%}
              {{matches or []}}
            {%- endif -%}
        alias: Append to matches, for Offers by Name or ArticleName

      - alias: If has matches, then add to Todo-list
        if:
          - alias: If has matches
            condition: template
            value_template: "{{ (matches or []) | count > 0 }}"
        then:
          - variables:
              matched_offers: "{{ matches }}"
              matched_offer_ids: "{{ matched_offers | map(attribute='id') | list }}"
          - alias: Run the specified actions
            choose: []
            default: !input actions
