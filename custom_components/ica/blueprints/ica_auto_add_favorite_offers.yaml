blueprint:
  name: ICA Auto add favorite offers
  description: "**Version 0.2.5**\n
    ICA Auto add favorite offers:\n
    This automation can help automatically add new offers to your ICA shopping list.\n
    [See the source on Github:](https://github.com/LazyTarget/ha-ica-todo/blob/main/custom_components/ica/blueprints/ica_auto_add_favorite_offers.yaml)\n"
  domain: automation
  source_url: https://github.com/LazyTarget/ha-ica-todo/blob/main/custom_components/ica/blueprints/ica_auto_add_favorite_offers.yaml
  author: LazyTarget
  input:
    ica_integration:
      name: ICA Account
      description: The ICA account to get favorite items from
      selector:
        config_entry:
          integration: ica

    shopping_todo_list:
      name: ICA Shopping List
      description: >
        The ICA shopping list to add the offers to. 

        EDIT: This will be obsolete and removed. To be replaced with the `new_matching_offers_action` input. 
        Which gives the option to add more conditionals or formatting before adding to Shopping list.
      selector:
        entity:
          filter:
            domain: todo
            integration: ica

    filter_stores:
      name: Filter by ICA Store(s)
      description: >
        Enter `store_id` to filter on particular ICA store. Otherwise leave empty to omit filter.

        Example value: `[12805]`
      default: []
      selector:
        text:
          multiple: true

    include_names:
      name: Names to match against
      description: >
        Enter `offer_name` or `article_name` to include offers on. Otherwise leave empty to omit includes.


        Example value: `[Majs Green Giant, Palsternacka 500g Klass 1 ICA]`
      default: []
      selector:
        text:
          multiple: true

    new_matching_offers_action:
      name: Action to execute when found new matching offers
      description: >
        Action to execute when found new matching offers.


        The following variables are available to use:

        - `matched_offers` - Contains a list of the offers that were found.


        - `matched_offer_ids` - Contains a list of the ids of the offers that were found. 
          This can easily be forwarded to the `ica.add_offers_to_shopping_list` service, just make sure you specify the target To-do list entity.
      default:
        - action: notify.persistent_notification
          metadata: {}
          data:
            message: "[Default] offer names: {{matched_offers | map(attribute='name') | join(' | ') }}"
          enabled: true
        - action: ica.add_offers_to_shopping_list
          metadata: {}
          data:
            offer_ids: "{{ matched_offer_ids }}"
            conflict_mode: APPEND
            entity_id: todo.ica_shopping_list
      selector:
        action: {}

triggers:
  trigger: event
  event_type: ica_new_offers

mode: queued
max: 5

variables:
  filter_stores: !input filter_stores
  include_names: !input include_names

conditions:
  condition: template
  value_template: '{{ trigger.event.data.type == "new_offers" or trigger.event.data.type == "new_offers_WIP" }}'

actions:
  - variables:
      offers: "{{ trigger.event.data.new_offers | list }}"
      offer_length: "{{offers | count | int(0)}}"
      matches: []
    alias: Arrange Offers

  - variables:
      offers: |
        {%- if filter_stores -%}
          {%- set result = namespace(items=[]) -%}
          {%- for o in offers | rejectattr("stores", "undefined") -%}
              {%- set matched_stores = o["stores"] | selectattr("id", "in", filter_stores | map('int') | list) | list -%}
              {%- if matched_stores | count > 0 -%}
                {%- set result.items = result.items + [o] -%}
              {%- endif -%}
          {%- endfor -%}
          {{result.items}}
        {%- else -%}
          {{offers}}
        {%- endif -%}
      offer_length: "{{offers | count | int(0)}}"
    alias: Limit Offers to the chosen stores

  - alias: If has offers left, then proceed to fetch favorites
    if:
      - alias: If has modified offers
        condition: template
        value_template: "{{ (offers | default([]) | count) > 0 }}"
    then:
      - action: ica.get_baseitems
        metadata: {}
        data:
          integration: !input ica_integration
        response_variable: ica_baseitems

      - variables:
          baseitems_eans: >
            {{ ica_baseitems["items"] | rejectattr("articleEan", "undefined") |
            map(attribute="articleEan") | list }}
        alias: Arrange 'Favorite items'

      - variables:
          include_names: >
            {% set result = namespace(names=include_names or []) %}

            {%- for b in ica_baseitems["items"] 
              | selectattr("articleEan", "undefined") 
              | rejectattr("text", "in", result.names) -%}
              {%- set result.names = result.names + [b.text] -%}
            {%- endfor -%}

            {{result.names}}
        alias: Expand 'include_names' with Favorite items without an "EAN"

      - variables:
          baseitems_eans: |
            {% set p = namespace(id=baseitems_eans or []) %} {%- for x in p.id -%}
              {%- if x.index('0') == 0 -%}
                {%- set p.id = p.id + [x.lstrip('0')] -%}
              {%- endif -%}
            {%- endfor -%} {{p.id}}
        alias: Expand 'baseitems_eans' with EANs without '0'-prefix

      - variables:
          matches: |
            {%- if include_names -%}
              {%- set offer_ids = matches | default([]) | map(attribute="id") | list -%}
              {%- set result = namespace(id=offer_ids, offers=matches or []) -%}
              {%- for o in offers | rejectattr("id", "in", result.id) -%}
                  {%- set matched_eanArticles = o["eans"] | selectattr("articleDescription", "in", include_names) | list -%}
                  {%- if matched_eanArticles | count > 0 -%}
                    {%- set result.id = result.id + [o.id] -%}
                    {%- set result.offers = result.offers + [o] -%}
                  {%- elif o["name"] in include_names -%}
                    {%- set result.id = result.id + [o.id] -%}
                    {%- set result.offers = result.offers + [o] -%}
                  {%- endif -%}
              {%- endfor -%}
              {{result.offers}}
            {%- else -%}
              {{matches or []}}
            {%- endif -%}
        alias: Append to matches, for Offers by Name or ArticleName

      - variables:
          matches: >
            {%- set offer_ids = matches | default([]) | map(attribute="id") | list -%}
            {%- set result = namespace(id=offer_ids, offers=matches or []) -%}
            {%- for o in offers 
              | rejectattr("eans", "undefined") 
              | rejectattr("id", "in", result.id) -%}
                {%- set matched_eans = o["eans"] | selectattr("id", "in", baseitems_eans) | list -%}
                {%- if matched_eans | count > 0 -%}
                  {%- set result.id = result.id + [o.id] -%}
                  {%- set result.offers = result.offers + [o] -%}
                {%- endif -%}
            {%- endfor -%}
            {{result.offers}}
        alias: Append to matches, for Offers by "Favorite article ean(s)"

      - alias: If has matches, then add to Todo-list
        if:
          - alias: If has matches
            condition: template
            value_template: "{{ (matches or []) | count > 0 }}"
        then:
          - variables:
              matched_offers: "{{ matches }}"
              matched_offer_ids: "{{ matched_offers | map(attribute='id') | list }}"

          # - action: ica.add_offers_to_shopping_list
          #   metadata: {}
          #   data:
          #     offer_ids: "{{ matched_offer_ids }}"
          #     conflict_mode: APPEND
          #     entity_id: !input shopping_todo_list
          #   enabled: true

          - alias: Run the specified actions
            choose: []
            default: !input new_matching_offers_action
